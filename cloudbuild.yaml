steps:
  # Step 1: Install Node.js dependencies (including Drizzle Kit)
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    id: 'InstallDependencies'
    volumes:
      - name: 'node_modules'
        path: /app/node_modules

  # Step 2: Generate and Run Drizzle Migrations
  - name: 'gcr.io/cloud-builders/npm'
    id: 'DrizzleOperations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |

        # Disable SSL certificate validation (use with caution)
        export NODE_TLS_REJECT_UNAUTHORIZED=0
        
        # Construct the DATABASE_URL using secrets and environment variables/substitutions
        # This needs to be accessible by the build step (using private pool for private IP)
        export DATABASE_URL="${_DB_PROVIDER}://${_DB_USER}:$$DB_PASSWORD@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public&sslmode=require"

        # Verify connection string format (optional, for debugging)
        echo "Using DATABASE_URL (password hidden): ${_DB_PROVIDER}://${_DB_USER}:***@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public&sslmode=require"

        # Generate migration SQL files based on schema changes
        # This compares ./src/schema.ts with the state recorded in drizzle/meta/_journal.json
        # It does NOT connect to the database.
        echo "Generating Drizzle migration files..."
        npx drizzle-kit generate --dialect=postgresql --schema=./src/schema.ts

        # Apply migrations to the database
        # This connects to the DATABASE_URL and runs SQL files from the ./drizzle directory
        echo "Applying Drizzle migrations..."
        npx drizzle-kit push --config=drizzle.config.ts

        echo "Drizzle operations completed successfully."
    secretEnv: ['DB_PASSWORD']
    waitFor: ['InstallDependencies']
    volumes:
      - name: 'node_modules'
        path: /app/node_modules

  # Step 3: Build the Docker image for Drizzle Studio
  - name: 'gcr.io/cloud-builders/docker'
    id: 'BuildImage'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/drizzle-studio:latest', '--cache-from', 'gcr.io/${PROJECT_ID}/drizzle-studio:latest', '.']
    waitFor: ['DrizzleOperations'] # Wait for migrations to complete

  # Step 4: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'PushImage'
    args: ['push', 'gcr.io/${PROJECT_ID}/drizzle-studio:latest']
    waitFor: ['BuildImage']

  # Step 5: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'DeployToCloudRun'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run deploy drizzle-studio \
        --image=gcr.io/${PROJECT_ID}/drizzle-studio:latest \
        --region=${_REGION} \
        --platform=managed \
        --allow-unauthenticated \
        --cpu=1 \
        --memory=512Mi \
        --min-instances=0 \
        --max-instances=1 \
        # Set the DATABASE_URL env var for the running Drizzle Studio container
        --set-env-vars="DATABASE_URL=${_DB_PROVIDER}://${_DB_USER}:$$DB_PASSWORD@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public&sslmode=require" \
        --network=${_NETWORK} \
        --subnet=${_SUBNET} \
        --vpc-egress=${_VPC_EGRESS} # Needed to reach the private IP of Cloud SQL
    secretEnv: ['DB_PASSWORD']
    waitFor: ['PushImage']

# List the images created by the build
images:
  - 'gcr.io/${PROJECT_ID}/drizzle-studio:latest'

# Define how secrets are accessed during the build
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/$_DB_SECRET/versions/2 # UPDATE with your secret version name
      env: 'DB_PASSWORD'

# Specify the Private Worker Pool (Required for accessing private IP during build/migration)
options:
  pool:
    name: 'projects/${PROJECT_ID}/locations/$_REGION/workerPools/$_WORKER_POOL' # UPDATE with your worker pool name

# Define substitutions (UPDATE these with your actual values)
substitutions:
  _DB_PROVIDER: postgresql
  _DB_USER: postgres             # Your DB User
  _DB_NAME: drizzle-studio   # Your DB Name (Choose a suitable name)
  _DB_PORT: "5432"
  _DB_SECRET: postgres-password
  _CLOUD_SQL_PRIVATE_IP: 10.24.34.3 # Your Cloud SQL Private IP
  _REGION: us-central1           # Your Cloud Run/SQL Region
  _NETWORK: default               # Your VPC Network Name
  _SUBNET: default                # Your VPC Subnet Name
  _VPC_EGRESS: private-ranges-only # Or 'all-traffic' if needed, usually private is correct for Cloud SQL private IP
  _WORKER_POOL: just-pool